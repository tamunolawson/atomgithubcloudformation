AWSTemplateFormatVersion: 2010-09-09
Description:  This will create VPC Network Stack
Metadata: {}

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default:  10.10.12.0/24
    Description:  VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  PubAvailabilityZone:
    Description:  The availability zone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  PrivAvailabilityZone:
    Description:  The availability zone use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  PubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default:  10.10.12.0/25
    Description:  VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  PrivSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default:  10.10.12.128/25
    Description:  VPC CIDR Block for the Private Subnet (eg 10.0.0.0/24)
    Type: String

  InstanceName:
    Type: String

  InstanceType:
    Description:  EC2 Instance Type
    Type: String
    Default:  t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
    ConstraintDescription:  must be a valid EC2 instance type.

  KeyName:
    Description:  This will be an EC2 Key Pair to allow SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default:  awsg
    ConstraintDescription:  This must be an existing EC2 KeyPair.

Mappings:
  RegionMap:
    us-east-1:
      "64": "ami-6871a115"
    ap-south-1:
      "64": "ami-5b673c34"

Resources:
  MyDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref:  CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key:  Name
          Value:
            Ref:  AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key:  Name
         Value:
           Ref:  AWS::StackName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref:  InternetGateway
      VpcId:
        Ref:  MyDemoVPC
  Rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key:  Name
          Value:  {Ref: 'AWS::StackName'}
      VpcId:
        Ref:  MyDemoVPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref:  InternetGateway
      RouteTableId:
        Ref:  Rtb
  PubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: PubAvailabilityZone}
      CidrBlock:  {Ref: PubSubnetCIDR}
      MapPublicIpOnLaunch:  true
      Tags:
        - Key:  Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref:  'AWS::StackName'}, {Ref:  PubAvailabilityZone}]
      VpcId:  {Ref: MyDemoVPC}
  PrivSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: PrivAvailabilityZone}
      CidrBlock:  {Ref: PrivSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key:  Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref:  'AWS::StackName'},  {Ref: PrivAvailabilityZone}]
      VpcId:  {Ref: MyDemoVPC}
  PubSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref:  Rtb
      SubnetId:
        Ref:  PubSubnet
  PrivSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref:  Rtb
      SubnetId:
        Ref:  PrivSubnet
  InstanceSceurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This is designed to enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId:  {Ref: MyDemoVPC}
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      KeyName:  !Ref KeyName
      ImageId:  !FindInMap  [RegionMap, !Ref  "AWS::Region", 64]
      InstanceType: !Ref  InstanceType
      SubnetId: !Ref  PubSubnet
      SecurityGroupIds:
        - !Ref  InstanceSceurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -X
            yum -Y install httpd
            systemctl start httpd
            echo "<h1>  Welcome to DSNSolutions CloudFormation Demo </h1>"  >>  /var/www/html/index.html

Outputs:
  TemplateID:
    Description:  'DSNSolutions CloudFormation Demo Template'
    Value:  'vpc/EC2'

  ImageId:
    Description:    'The value of AMI'
    Value:  !FindInMap  [RegionMap, !Ref "AWS::Region", 64]

  IPAddress:
    Description:  'The public IP address of the EC2 Instance.'
    Value:  !GetAtt WebServer.PublicDnsName
    Export:
      Name: !Sub  '${AWS::StackName}-Public-DNS-Address'  
